( Root (span 1 118) 
  ( Satellite (leaf 1) (rel2par organization-heading) (text _!Proof_!) )
  ( Nucleus (span 2 118) (rel2par span)
    ( Satellite (span 2 7) (rel2par context-background)
      ( Satellite (span 2 5) (rel2par explanation-justify)
        ( Satellite (span 2 4) (rel2par contingency-condition)
          ( Nucleus (span 2 3) (rel2par same-unit)
            ( Nucleus (leaf 2) (rel2par span) (text _!If the sets S and T_!) )
            ( Satellite (leaf 3) (rel2par elaboration-attribute) (text _!considered_!) )
          )
          ( Nucleus (leaf 4) (rel2par same-unit) (text _!are empty or singletons ,_!) )
        )
        ( Nucleus (leaf 5) (rel2par span) (text _!the theorem holds vacuously or trivially ._!) )
      )
      ( Nucleus (span 6 7) (rel2par span)
        ( Satellite (leaf 6) (rel2par attribution-positive) (text _!Thus assume_!) )
        ( Nucleus (leaf 7) (rel2par span) (text _!S and T each contain at least two elements ._!) )
      )
    )
    ( Nucleus (span 8 118) (rel2par span)
      ( Nucleus (span 8 83) (rel2par joint-list)
        ( Satellite (span 8 19) (rel2par organization-preparation)
          ( Satellite (span 8 17) (rel2par context-background)
            ( Satellite (leaf 8) (rel2par context-background) (text _!Let U = ( S , ⪯ S ) ∪ ( T , ⪯ T )_!) )
            ( Nucleus (span 9 17) (rel2par span)
              ( Satellite (leaf 9) (rel2par organization-preparation) (text _!Define the following relation ⪯ on U :_!) )
              ( Nucleus (span 10 17) (rel2par span)
                ( Nucleus (span 10 14) (rel2par joint-disjunction)
                  ( Nucleus (span 10 11) (rel2par span)
                    ( Satellite (leaf 10) (rel2par context-circumstance) (text _!∀ x , y ∈ U :_!) )
                    ( Nucleus (leaf 11) (rel2par span) (text _!x ⪯ y_!) )
                  )
                  ( Satellite (span 12 14) (rel2par contingency-condition)
                    ( Nucleus (leaf 12) (rel2par same-unit) (text _!if and only if :_!) )
                    ( Nucleus (span 13 14) (rel2par same-unit)
                      ( Satellite (leaf 13) (rel2par context-circumstance) (text _!x , y ∈ S :_!) )
                      ( Nucleus (leaf 14) (rel2par span) (text _!x ⪯ S y_!) )
                    )
                  )
                )
                ( Nucleus (span 15 16) (rel2par joint-disjunction)
                  ( Satellite (leaf 15) (rel2par context-circumstance) (text _!or : x , y ∈ T :_!) )
                  ( Nucleus (leaf 16) (rel2par span) (text _!x ⪯ T y_!) )
                )
                ( Nucleus (leaf 17) (rel2par joint-disjunction) (text _!or : x ∈ S , y ∈ T_!) )
              )
            )
          )
          ( Nucleus (span 18 19) (rel2par span)
            ( Satellite (leaf 18) (rel2par attribution-positive) (text _!We claim_!) )
            ( Nucleus (leaf 19) (rel2par span) (text _!that ⪯ is a well - ordering ._!) )
          )
        )
        ( Nucleus (span 20 83) (rel2par span)
          ( Nucleus (span 20 59) (rel2par joint-list)
            ( Satellite (span 20 57) (rel2par explanation-evidence)
              ( Satellite (span 20 22) (rel2par organization-preparation)
                ( Nucleus (span 20 21) (rel2par span)
                  ( Satellite (leaf 20) (rel2par attribution-positive) (text _!First , we show_!) )
                  ( Nucleus (leaf 21) (rel2par span) (text _!it is a total ordering ._!) )
                )
                ( Satellite (leaf 22) (rel2par mode-means) (text _!Checking in turn each of the criteria for a total ordering :_!) )
              )
              ( Nucleus (span 23 57) (rel2par span)
                ( Nucleus (span 23 27) (rel2par joint-list)
                  ( Satellite (leaf 23) (rel2par organization-heading) (text _!Reflexivity_!) )
                  ( Nucleus (span 24 27) (rel2par span)
                    ( Satellite (span 24 25) (rel2par explanation-evidence)
                      ( Satellite (leaf 24) (rel2par contingency-condition) (text _!If x = y ,_!) )
                      ( Nucleus (leaf 25) (rel2par span) (text _!they 're necessarily both in S or T simultaneously ._!) )
                    )
                    ( Nucleus (span 26 27) (rel2par span)
                      ( Nucleus (leaf 26) (rel2par span) (text _!Reflexivity then follows from ⪯ S and x ⪯ T being reflexive ,_!) )
                      ( Satellite (leaf 27) (rel2par explanation-justify) (text _!as they are both orderings ._!) )
                    )
                  )
                )
                ( Nucleus (span 28 46) (rel2par joint-list)
                  ( Satellite (leaf 28) (rel2par organization-heading) (text _!Transitivity_!) )
                  ( Nucleus (span 29 46) (rel2par span)
                    ( Satellite (span 29 45) (rel2par explanation-evidence)
                      ( Satellite (leaf 29) (rel2par context-background) (text _!Let x , y , z ∈ U ._!) )
                      ( Nucleus (span 30 45) (rel2par span)
                        ( Nucleus (span 30 32) (rel2par joint-disjunction)
                          ( Satellite (span 30 31) (rel2par contingency-condition)
                            ( Nucleus (leaf 30) (rel2par joint-disjunction) (text _!If x , y , z ∈ S_!) )
                            ( Nucleus (leaf 31) (rel2par joint-disjunction) (text _!or x , y , z ∈ T simultaneously ,_!) )
                          )
                          ( Nucleus (leaf 32) (rel2par span) (text _!then ⪯ is transitive by the transitivity of ⪯ S and ⪯ T ._!) )
                        )
                        ( Nucleus (span 33 45) (rel2par joint-disjunction)
                          ( Satellite (span 33 35) (rel2par context-background)
                            ( Satellite (leaf 33) (rel2par attribution-positive) (text _!Suppose_!) )
                            ( Nucleus (span 34 35) (rel2par span)
                              ( Nucleus (leaf 34) (rel2par joint-list) (text _!x , y ∈ S_!) )
                              ( Nucleus (leaf 35) (rel2par joint-list) (text _!and z ∈ T ._!) )
                            )
                          )
                          ( Nucleus (span 36 45) (rel2par span)
                            ( Nucleus (span 36 39) (rel2par joint-list)
                              ( Satellite (leaf 36) (rel2par context-background) (text _!Let x ⪯ y and y ⪯ z ._!) )
                              ( Nucleus (span 37 39) (rel2par span)
                                ( Nucleus (leaf 37) (rel2par span) (text _!Then x ⪯ z_!) )
                                ( Satellite (span 38 39) (rel2par explanation-justify)
                                  ( Nucleus (leaf 38) (rel2par joint-list) (text _!because x ∈ S_!) )
                                  ( Nucleus (leaf 39) (rel2par joint-list) (text _!and y ∈ T ._!) )
                                )
                              )
                            )
                            ( Nucleus (span 40 45) (rel2par joint-list)
                              ( Satellite (span 40 42) (rel2par context-background)
                                ( Satellite (leaf 40) (rel2par attribution-positive) (text _!Suppose_!) )
                                ( Nucleus (span 41 42) (rel2par span)
                                  ( Nucleus (leaf 41) (rel2par joint-list) (text _!x ∈ S_!) )
                                  ( Nucleus (leaf 42) (rel2par joint-list) (text _!and y , z ∈ T ._!) )
                                )
                              )
                              ( Nucleus (span 43 45) (rel2par span)
                                ( Nucleus (leaf 43) (rel2par span) (text _!Then x ⪯ z_!) )
                                ( Satellite (span 44 45) (rel2par explanation-justify)
                                  ( Nucleus (leaf 44) (rel2par joint-list) (text _!also because x ∈ S_!) )
                                  ( Nucleus (leaf 45) (rel2par joint-list) (text _!and y ∈ T ._!) )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                    ( Nucleus (leaf 46) (rel2par span) (text _!Thus ⪯ is transitive ._!) )
                  )
                )
                ( Nucleus (span 47 57) (rel2par joint-list)
                  ( Satellite (leaf 47) (rel2par organization-heading) (text _!Antisymmetry_!) )
                  ( Nucleus (span 48 57) (rel2par span)
                    ( Satellite (leaf 48) (rel2par context-background) (text _!Let x ⪯ y and y ⪯ x ._!) )
                    ( Nucleus (span 49 57) (rel2par span)
                      ( Satellite (span 49 56) (rel2par explanation-evidence)
                        ( Nucleus (span 49 52) (rel2par joint-disjunction)
                          ( Nucleus (span 49 50) (rel2par restatement-repetition)
                            ( Satellite (leaf 49) (rel2par contingency-condition) (text _!If x , y ∈ S_!) )
                            ( Nucleus (leaf 50) (rel2par span) (text _!then x = y by the antisymmetry of ⪯ S ._!) )
                          )
                          ( Nucleus (span 51 52) (rel2par restatement-repetition)
                            ( Nucleus (leaf 51) (rel2par span) (text _!Likewise_!) )
                            ( Satellite (leaf 52) (rel2par contingency-condition) (text _!if x , y ∈ T ._!) )
                          )
                        )
                        ( Nucleus (span 53 56) (rel2par joint-disjunction)
                          ( Satellite (span 53 54) (rel2par contingency-condition)
                            ( Nucleus (leaf 53) (rel2par joint-list) (text _!If x ∈ S_!) )
                            ( Nucleus (leaf 54) (rel2par joint-list) (text _!and y ∈ T ,_!) )
                          )
                          ( Nucleus (span 55 56) (rel2par span)
                            ( Nucleus (leaf 55) (rel2par joint-list) (text _!then y ∈ S_!) )
                            ( Nucleus (leaf 56) (rel2par joint-list) (text _!and x ∈ T as well ._!) )
                          )
                        )
                      )
                      ( Nucleus (leaf 57) (rel2par span) (text _!Thus x = y from the antisymmetry of ⪯ S or ⪯ T ._!) )
                    )
                  )
                )
              )
            )
            ( Nucleus (span 58 59) (rel2par span)
              ( Satellite (leaf 58) (rel2par attribution-positive) (text _!Conclude_!) )
              ( Nucleus (leaf 59) (rel2par span) (text _!that ⪯ is a total ordering ._!) )
            )
          )
          ( Nucleus (span 60 83) (rel2par joint-list)
            ( Satellite (span 60 65) (rel2par context-background)
              ( Satellite (span 60 61) (rel2par context-circumstance)
                ( Satellite (leaf 60) (rel2par purpose-goal) (text _!To show ⪯ is a well - ordering ,_!) )
                ( Nucleus (leaf 61) (rel2par span) (text _!consider a non-empty set X ⊆ U ._!) )
              )
              ( Nucleus (span 62 65) (rel2par span)
                ( Nucleus (leaf 62) (rel2par joint-disjunction) (text _!Then either : X ∩ S = ∅_!) )
                ( Nucleus (leaf 63) (rel2par joint-disjunction) (text _!or : X ∩ T = ∅_!) )
                ( Nucleus (span 64 65) (rel2par joint-disjunction)
                  ( Nucleus (leaf 64) (rel2par joint-list) (text _!or : X ∩ S is non-empty_!) )
                  ( Nucleus (leaf 65) (rel2par joint-list) (text _!and X ∩ T is non-empty ._!) )
                )
              )
            )
            ( Nucleus (span 66 83) (rel2par span)
              ( Satellite (span 66 82) (rel2par explanation-evidence)
                ( Nucleus (span 66 70) (rel2par joint-disjunction)
                  ( Satellite (span 66 68) (rel2par explanation-evidence)
                    ( Nucleus (leaf 66) (rel2par span) (text _!In the first case , X ⊆ T ,_!) )
                    ( Satellite (span 67 68) (rel2par explanation-evidence)
                      ( Nucleus (leaf 67) (rel2par span) (text _!by Intersection with Complement is Empty_!) )
                      ( Satellite (leaf 68) (rel2par contingency-condition) (text _!iff Subset ._!) )
                    )
                  )
                  ( Nucleus (span 69 70) (rel2par span)
                    ( Nucleus (leaf 69) (rel2par span) (text _!Then X has a smallest element_!) )
                    ( Satellite (leaf 70) (rel2par elaboration-attribute) (text _!defined by ⪯ T ._!) )
                  )
                )
                ( Nucleus (span 71 75) (rel2par joint-disjunction)
                  ( Satellite (span 71 73) (rel2par explanation-evidence)
                    ( Nucleus (leaf 71) (rel2par span) (text _!In the second case , X ⊆ S ,_!) )
                    ( Satellite (span 72 73) (rel2par explanation-evidence)
                      ( Nucleus (leaf 72) (rel2par span) (text _!also by Intersection with Complement is Empty_!) )
                      ( Satellite (leaf 73) (rel2par contingency-condition) (text _!iff Subset ._!) )
                    )
                  )
                  ( Nucleus (span 74 75) (rel2par span)
                    ( Nucleus (leaf 74) (rel2par span) (text _!Then X has a smallest element_!) )
                    ( Satellite (leaf 75) (rel2par elaboration-attribute) (text _!defined by ⪯ S ._!) )
                  )
                )
                ( Nucleus (span 76 82) (rel2par joint-disjunction)
                  ( Satellite (span 76 80) (rel2par context-background)
                    ( Nucleus (span 76 77) (rel2par joint-list)
                      ( Satellite (leaf 76) (rel2par explanation-justify) (text _!In the third case , the smallest element of X ∖ T is an element of S ._!) )
                      ( Nucleus (leaf 77) (rel2par span) (text _!Thus it precedes any element of T by the definition of ⪯ ._!) )
                    )
                    ( Nucleus (span 78 80) (rel2par joint-list)
                      ( Nucleus (span 78 79) (rel2par same-unit)
                        ( Nucleus (leaf 78) (rel2par span) (text _!The smallest element of X ∖ T ,_!) )
                        ( Satellite (leaf 79) (rel2par elaboration-attribute) (text _!which is a subset of S ,_!) )
                      )
                      ( Nucleus (leaf 80) (rel2par same-unit) (text _!is guaranteed to exist by the well - ordering on S ._!) )
                    )
                  )
                  ( Nucleus (span 81 82) (rel2par span)
                    ( Nucleus (leaf 81) (rel2par span) (text _!This smallest element is then also the smallest element_!) )
                    ( Satellite (leaf 82) (rel2par elaboration-attribute) (text _!of ( X ∖ T ) ∪ T = X ._!) )
                  )
                )
              )
              ( Nucleus (leaf 83) (rel2par span) (text _!Thus ⪯ is a well - ordering on S ∪ T . □_!) )
            )
          )
        )
      )
      ( Nucleus (span 84 118) (rel2par joint-list)
        ( Nucleus (span 84 116) (rel2par span)
          ( Satellite (span 84 109) (rel2par explanation-evidence)
            ( Nucleus (span 84 91) (rel2par joint-list)
              ( Satellite (span 84 90) (rel2par explanation-evidence)
                ( Nucleus (span 84 89) (rel2par joint-list)
                  ( Satellite (span 84 87) (rel2par context-background)
                    ( Satellite (leaf 84) (rel2par organization-preparation) (text _!Consider the mapping :_!) )
                    ( Nucleus (span 85 87) (rel2par span)
                      ( Satellite (leaf 85) (rel2par organization-preparation) (text _!k :_!) )
                      ( Nucleus (span 86 87) (rel2par span)
                        ( Nucleus (leaf 86) (rel2par joint-list) (text _!( T , ⪯ T ) → ( U , ⪯ ) :_!) )
                        ( Nucleus (leaf 87) (rel2par joint-list) (text _!k ( α ) = α_!) )
                      )
                    )
                  )
                  ( Nucleus (span 88 89) (rel2par span)
                    ( Satellite (leaf 88) (rel2par explanation-evidence) (text _!Then k is strictly increasing , by the construction of ⪯ ._!) )
                    ( Nucleus (leaf 89) (rel2par span) (text _!Thus there is a strictly increasing mapping from T to U ._!) )
                  )
                )
                ( Nucleus (leaf 90) (rel2par joint-list) (text _!From Strictly Increasing Mapping Between Wosets Implies Order Isomorphism ,_!) )
              )
              ( Nucleus (leaf 91) (rel2par span) (text _!T is order isomorphic to U or an initial segment of U ._!) )
            )
            ( Nucleus (span 92 102) (rel2par joint-list)
              ( Satellite (span 92 97) (rel2par context-background)
                ( Nucleus (span 92 94) (rel2par span)
                  ( Nucleus (leaf 92) (rel2par span) (text _!Let Ix denote the initial segment in U_!) )
                  ( Satellite (span 93 94) (rel2par elaboration-attribute)
                    ( Nucleus (leaf 93) (rel2par span) (text _!determined by x ,_!) )
                    ( Satellite (leaf 94) (rel2par mode-manner) (text _!according to k ._!) )
                  )
                )
                ( Satellite (span 95 97) (rel2par elaboration-additional)
                  ( Satellite (leaf 95) (rel2par attribution-positive) (text _!Note_!) )
                  ( Nucleus (span 96 97) (rel2par span)
                    ( Nucleus (leaf 96) (rel2par span) (text _!that Ix = Ik ( x ) ,_!) )
                    ( Satellite (leaf 97) (rel2par explanation-justify) (text _!because k ( x ) = x ._!) )
                  )
                )
              )
              ( Nucleus (span 98 102) (rel2par span)
                ( Satellite (span 98 101) (rel2par explanation-evidence)
                  ( Satellite (span 98 99) (rel2par contingency-condition)
                    ( Satellite (leaf 98) (rel2par attribution-positive) (text _!Suppose_!) )
                    ( Nucleus (leaf 99) (rel2par span) (text _!x ∈ S ._!) )
                  )
                  ( Nucleus (span 100 101) (rel2par span)
                    ( Nucleus (leaf 100) (rel2par span) (text _!Then Ix ⊆ S_!) )
                    ( Satellite (leaf 101) (rel2par explanation-justify) (text _!because ⪯ is a well - ordering ._!) )
                  )
                )
                ( Nucleus (leaf 102) (rel2par span) (text _!Thus there is an order isomorphism from T to Ix in S ._!) )
              )
            )
            ( Nucleus (span 103 109) (rel2par joint-list)
              ( Satellite (span 103 108) (rel2par explanation-evidence)
                ( Satellite (span 103 104) (rel2par contingency-condition)
                  ( Satellite (leaf 103) (rel2par attribution-positive) (text _!Suppose_!) )
                  ( Nucleus (leaf 104) (rel2par span) (text _!x = min T , the smallest element of T ._!) )
                )
                ( Nucleus (span 105 108) (rel2par span)
                  ( Nucleus (span 105 106) (rel2par joint-list)
                    ( Nucleus (leaf 105) (rel2par span) (text _!Then every element of S strictly precedes x ,_!) )
                    ( Satellite (leaf 106) (rel2par explanation-justify) (text _!as x is in T ._!) )
                  )
                  ( Nucleus (span 107 108) (rel2par joint-list)
                    ( Nucleus (leaf 107) (rel2par span) (text _!Also , x precedes every element of T ,_!) )
                    ( Satellite (leaf 108) (rel2par causal-result) (text _!so Ix ≠ T ._!) )
                  )
                )
              )
              ( Nucleus (leaf 109) (rel2par span) (text _!Thus there is an order isomorphism from T to all of S ._!) )
            )
          )
          ( Nucleus (span 110 116) (rel2par span)
            ( Satellite (span 110 115) (rel2par explanation-evidence)
              ( Satellite (span 110 112) (rel2par contingency-condition)
                ( Satellite (leaf 110) (rel2par attribution-positive) (text _!Suppose_!) )
                ( Nucleus (span 111 112) (rel2par span)
                  ( Nucleus (leaf 111) (rel2par joint-list) (text _!x ∈ T_!) )
                  ( Nucleus (leaf 112) (rel2par joint-list) (text _!and x ≠ min T ._!) )
                )
              )
              ( Nucleus (span 113 115) (rel2par span)
                ( Nucleus (leaf 113) (rel2par joint-list) (text _!Then Ix defines an initial segment in T ._!) )
                ( Nucleus (span 114 115) (rel2par joint-list)
                  ( Nucleus (leaf 114) (rel2par span) (text _!Also , every element of S strictly precedes x ,_!) )
                  ( Satellite (leaf 115) (rel2par explanation-justify) (text _!as x is in T ._!) )
                )
              )
            )
            ( Nucleus (leaf 116) (rel2par span) (text _!Thus there is an order isomorphism from an initial segment of T to all of S ._!) )
          )
        )
        ( Satellite (span 117 118) (rel2par elaboration-additional)
          ( Nucleus (leaf 117) (rel2par span) (text _!The cases are distinct_!) )
          ( Satellite (leaf 118) (rel2par explanation-evidence) (text _!by Well - Ordered Class is not Isomorphic to Initial Segment . ■_!) )
        )
      )
    )
  )
)
