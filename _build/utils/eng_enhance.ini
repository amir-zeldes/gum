# eng_enhance.ini
# USAGE: 
# > python depedit.py -c eng_enhance.ini INFILE.conllu

# set a variable for transitive verbal lemmas that trigger subject control for `xcomp`
{$subject_control}=/promise|threaten|offer|propose/

# erase any existing enhanced dependencies in the input except for ellipsis nodes
#num!=/.*\..*/&head2=/.*/	none	#1:head2=;#1:edep=

# store desired lemma form for `conj`, `case` and `mark` augmentation
# use lowercase of lemma by default
lemma=/(.*)/	none	#1:storage2=$1L
# for participles used as mark/case, use the lowercased word form, not the verbal lemma
text=/(.*)/&xpos=/VB[GN]/	none	#1:storage2=$1L
# for non-alphabetic words set to empty to avoid validation errors
text=/.*[^A-Za-z]/	none	#1:storage2=
# try known mappings for specific non-alphabetic cases
text=/[–-]+/	none	#1:storage2=to
text=/\u002F+/	none	#1:storage2=slash
text=/\+/	none	#1:storage2=plus
text=/-/	none	#1:storage2=minus
text=/@/	none	#1:storage2=at
text=/[Vv][Ss]?\.?/	none	#1:storage2=versus
text=/:/	none	#1:storage2=colon
text=/±/	none	#1:storage2=plus_minus
text=/à/	none	#1:storage2=a
text=/ca?\./	none	#1:storage2=circa
text=/&/	none	#1:storage2=and
text=/n'/	none	#1:storage2=and
text=/cuz/	none	#1:storage2=because
text=/x/&func=/case/	none	#1:storage2=by
lemma=/(time|⋅)/&func=/(case|cc)/	none	#1:storage2=times
lemma=/∪/&func=/cc/	none	#1:storage2=union
lemma=/∩/&func=/cc/	none	#1:storage2=intersection
lemma=/∖/&func=/cc/	none	#1:storage2=setdiff

# mark WRB complementizer as 'marklike' for augmentation since it is now advmod and not mark
xpos=/WRB/&func=/advmod/	none	#1:storage3=marklike
func=/mark/	none	#1:storage3=marklike

# nsubj:outer
# before another nsubj or csubj (:outer1) or before a pre-head expl (:outer2)
func=/^([nc]subj)$/;func=/([nc]subj.*|expl)/;text=/.*/	#1.*#2;#3>#2;#3>#1	#1:func=$1:outer
# before a cop dependent of a VERB/AUX (:outer3)
func=/^([nc]subj)$/;func=/cop/;upos=/VERB|AUX/	#1.*#2;#3>#2;#3>#1	#1:func=$1:outer
# before the first of two cop dependents of a predicate (:outer4)
func=/^([nc]subj)$/;func=/cop/;func=/cop/;text=/.*/	#1.*#2.*#3;#4>#3;#4>#2;#4>#1	#1:func=$1:outer


# default edep - duplicate the regular dependency
text=/.*/;func=/(.*)/	#1>#2	#1~#2;#2:edep=$1
func=/root/	none	#1:ehead=0;#1:edep=root

# annotate tokens internally to mark whether they have certain dependents
xpos=/[VN].*|JJ.?|RB.?/;func=/aux.*/	#1>#2	#1:storage+=hasaux
xpos=/[VN].*|JJ.?|RB.?/;func=/.subj.*/	#1>#2	#1:storage+=hassubj
xpos=/[VN].*|JJ.?|RB.?/;func=/cop/	#1>#2	#1:storage+=hascop
xpos=/VBN/;func=/aux:pass/	#1>#2	#1:storage+=haspass
xpos=/[NP].*/;func=/case/	#1>#2	#1:storage+=hascase

# handle augmented `case`
# combo case + mark
func=/advcl/;func=/case/&storage2=/(.*)/;storage3=/marklike/&xpos=/W.*/&storage2=/(.*)/;text=/.*/	#1>#2;#1>#3;#2.#3;#4>#1	#4~#1;#1:edep=advcl:$1_$2;#2:storage=hasdblfixed
# combo mark-fixed + mark
func=/advcl/;storage3=/marklike/&storage2=/(.*)/;func=/fixed/&storage2=/(.*)/;storage3=/marklike/&storage2=/(.*)/;text=/.*/	#1>#2>#3;#1>#4;#2.#3.#4;#5>#1	#5~#1;#1:edep=advcl:$1_$2_$3;#2:storage=hasdblfixed
# two and three word `fixed` and `goeswith` expressions
text=/.*/;func=/^(obl|nmod)$/;storage2=/(.*)/&func=/(case)/;func=/fixed/&storage2=/(.*)/;func=/fixed/&storage2=/(.*)/	#1>#2>#3>#4;#3>#5;#4.#5	#1~#2;#2:edep=$1:$2_$4_$5;#3:storage=hasdblfixed
text=/.*/;func=/^(obl|nmod)$/;storage2=/(.*)/&func=/(case)/&storage!=/hasdblfixed/;func=/fixed/&storage2=/(.*)/	#1>#2>#3>#4	#1~#2;#2:edep=$1:$2_$4;#3:storage=hasfixed
text=/.*/;func=/^(obl|nmod)$/;storage2=/(.*)/&func=/(case)/&storage!=/hasdblfixed/;func=/goeswith/&storage2=/(.*)/	#1>#2>#3>#4	#1~#2;#2:edep=$1:$2$4;#3:storage=hasgoeswith
# handle double case, e.g. obl:out_of for "out of X", rather than obl:out
text=/.*/;func=/^(obl|nmod)$/;func=/case/&xpos!=/POS/&storage2=/(.*)/;func=/case/&xpos!=/POS/&storage2=/(.*)/	#3.*#4;#1>#2;#2>#3;#2>#4	#1~#2;#2:edep+=$1:$2_$3;#3:storage=;#4:storage=
# all other regular cases - and ruling out genitive 's as the augmentation (xpos=POS)
text=/.*/;func=/^(obl|nmod)$/;storage2=/(.*)/&func=/(case)/&xpos!=/POS/&storage!=/hasfixed/	#1>#2>#3	#1~#2;#2:edep+=$1:$2;#3:storage=
text=/.*/;func=/^(obl|nmod)$/;storage2=/(.*)/&func=/(case)/&xpos!=/POS/&storage!=/hasfixed/;func=/conj/&storage!=/.*hascase.*/	#1>#2>#3;#2>#4	#1~#4;#4:edep+=$1:$2
# handle augmented `mark`
# two and three word `fixed` expressions
text=/.*/;func=/^(advcl|acl)$/;storage2=/(.*)/&func=/(mark|advmod)/&storage3=/marklike/;func=/fixed/&storage2=/(.*)/;func=/fixed/&storage2=/(.*)/	#1>#2>#3>#4;#3>#5;#4.#5	#1~#2;#2:edep=$1:$2_$4_$5;#3:storage=hasdblfixed
text=/.*/;func=/^(advcl|acl)$/;storage2=/(.*)/&func=/(mark|advmod)/&storage3=/marklike/&storage!=/hasdblfixed/;func=/fixed/&storage2=/(.*)/	#1>#2>#3>#4	#1~#2;#2:edep=$1:$2_$4;#3:storage=hasfixed
text=/.*/;func=/^(advcl|acl)$/;storage2=/(.*)/&func=/(mark|advmod)/&storage3=/marklike/&storage!=/hasdblfixed/;func=/goeswith/&storage2=/(.*)/	#1>#2>#3>#4	#1~#2;#2:edep=$1:$2$4;#3:storage=hasgoeswith
# handle double mark, e.g. acl:for_to in "for X to Y", rather than acl:for
text=/.*/;func=/^(advcl|acl)$/;storage3=/marklike/&xpos!=/POS/&storage2=/(.*)/;storage3=/marklike/&xpos!=/POS/&storage2=/(.*)/	#3.*#4;#1>#2;#2>#3;#2>#4	#1~#2;#2:edep+=$1:$2_$3;#3:storage=;#4:storage=
# all other regular cases - and ruling out genitive 's as the augmentation (xpos=POS)
text=/.*/;func=/^(advcl|acl)$/;storage2=/(.*)/&func=/(mark|advmod)/&storage3=/marklike/&xpos!=/POS/&storage!=/.*fixed/	#1>#2>#3	#1~#2;#2:edep+=$1:$2;#3:storage=
text=/.*/;func=/^(advcl|acl)$/;storage2=/(.*)/&func=/(mark|advmod)/&storage3=/marklike/&xpos!=/POS/&storage!=/.*fixed/;func=/conj/&storage!=/.*case.*/	#1>#2>#3;#2>#4	#1~#4;#4:edep+=$1:$2
# augment `conj` with `cc` lemma
# two and three word `fixed` expressions
text=/.*/;func=/^(conj)$/;storage2=/(.*)/&func=/(cc)/;func=/fixed/&storage2=/(.*)/;func=/fixed/&storage2=/(.*)/	#1>#2>#3>#4;#3>#5;#4.#5	#1~#2;#2:edep=$1:$2_$4_$5;#3:storage=hasdblfixed
text=/.*/;func=/^(conj)$/;storage2=/(.*)/&func=/(cc)/&storage!=/hasdblfixed/;func=/fixed/&storage2=/(.*)/	#1>#2>#3>#4	#1~#2;#2:edep=$1:$2_$4;#3:storage=hasfixed
# all other regular cases
text=/.*/;func=/^(conj)$/;storage2=/(.*)/&func=/(cc)/&storage!=/.*fixed/	#1>#2>#3	#1~#2;#2:edep=$1:$2;#3:storage=
# multiple conj
text=/.*/;func=/conj/&edep=/.*conj:([^|]+).*/;func=/conj/&edep!=/.*conj:.*/	#1>#2;#1>#3;#3.*#2	#1~#3;#3:edep=conj:$1

# xcomp
# `obj` + `xcomp` subject sharing - object control (X forced Y to Z := Z ~>xsubj Y)
lemma!=/{$subject_control}/;func=/i?obj/;func=/xcomp/	#1>#2;#1>#3	#3~#2;#2:edep=nsubj:xsubj;#3:storage+=xobj
lemma!=/{$subject_control}/;func=/ccomp/;func=/xcomp/	#1>#2;#1>#3	#3~#2;#2:edep=csubj:xsubj;#3:storage+=xobj
# subject control with transitive verb (X promised Y to Z := Z ~>xsubj X)
lemma=/{$subject_control}/;func=/i?obj|ccomp/;func=/xcomp/;func=/(.subj).*/	#1>#2;#1>#3;#1>#4	#3~#4;#4:edep=$1:xsubj;#3:storage+=xobj
# coordinate of `xcomp` with xsubj: copy xsubj dependency (X want to A and B)
text=/.*/;func=/xcomp/&storage!=/.*xobj.*/;func=/(.subj).*/;func=/conj/&storage!=/.*xsubj.*/	#1>#2;#1>#3;#2>#4	#4~#3;#3:edep=$1:xsubj;#4:storage+=xsubj
# repeat in case the coordinate has its own coordinate (X wanted to A and B or C)
text=/.*/;func=/xcomp/&storage!=/.*xobj.*/;func=/(.subj).*/;func=/conj/&storage!=/.*xsubj.*/	#1>#2;#1>#3;#2>#4	#4~#3;#3:edep=$1:xsubj;#4:storage+=xsubj

# intransitive subject control
xpos=/V.*|JJ.?|RB.?/;func=/(.subj).*/;func=/xcomp/&storage!=/.*xobj.*/	#1>#2;#1>#3	#3~#2;#2:edep=$1:xsubj
# remaining cases where xcomp has conj
func=/xcomp/;edep=/(.subj).*/;func=/conj/	#1>#3;#1~#2	#3~#2;#2:edep=$1:xsubj
# percolated subject control when xcomp has xcomp (X decided to try to cook)
xpos=/V.*|JJ.?|RB.?/;func=/(.subj).*/;func=/xcomp/&storage!=/.*xobj.*/;func=/xcomp/	#1>#2;#1>#3>#4	#4~#2;#2:edep=$1:xsubj
# double percolated subject control (X wanted to decide to try to cook)
xpos=/V.*|JJ.?|RB.?/;func=/(.subj).*/;func=/xcomp/&storage!=/.*xobj.*/;func=/xcomp/;func=/xcomp/	#1>#2;#1>#3>#4>#5	#5~#2;#2:edep=$1:xsubj
# secondary xcomp of xcomp object "X makes Y appear Z"
text=/.*/;func=/obj/;func=/xcomp/&storage!=/.*xobj.*/;func=/xcomp/	#1>#2;#1>#3;#3>#4	#4~#2;#2:edep=nsubj:xsubj
text=/.*/;func=/ccomp/;func=/xcomp/storage!=/.*xobj.*/;func=/xcomp/	#1>#2;#1>#3;#3>#4	#4~#2;#2:edep=csubj:xsubj
# subject predicate's coordinate predicate has xcomp (X wanted to A but decided to *B*)
func=/(.subj).*/;text=/.*/;func=/conj/&storage!=/.*hassubj.*/;func=/xcomp/&storage!=/.*xobj.*/	#2>#1;#2>#3>#4	#4~#1;#1:edep=$1:xsubj

# coord general - duplicate all resulting deps and edeps on `conj`; note that `parataxis` is not carried over
text=/.*/;func=/(.*)/&func!=/parataxis/;func=/conj/	#1>#2>#3	#1~#3;#3:edep=$1
text=/.*/;edep=/(.*)/&edep!=/conj.*/&func!=/parataxis/;func=/conj|root/	#1~#2;#2>#3	#1~#3;#3:edep=$1

# coord subjects
text=/.*/;func=/(.subj.*)/;func=/conj/	#1>#2>#3	#1~#3;#3:edep=$1
# coord xsubj - note use of the special edom property to copy ehead AND matching edeprel specifically
text=/.*/;edom=/(.*subj:xsubj)/;func=/conj/	#1~#2;#2>#3	#3:edom=$1

# coord two preds with one aux (X could A or B)
xpos=/V.*/;func=/(aux.*)/;xpos=/V.[GN]?/&func=/conj/&storage!=/.*hasaux.*/	#1>#2;#1>#3	#3~#2;#2:edep=$1

# coord two preds with one subj (X came and went); special handling for copula cases (X is rich and famous) including mixtures (X is rich but works hard)
xpos=/V.*/;func=/(.subj.*)/;xpos=/V.*/&func=/conj/&storage!=/.*hassubj.*/&storage!=/.*haspass.*/	#1>#2;#1>#3	#3~#2;#2:edep=$1
xpos=/V.*/;func=/(.subj).*/;xpos=/V.*/&func=/conj/&storage!=/.*hassubj.*/&storage=/.*haspass.*/	#1>#2;#1>#3	#3~#2;#2:edep=$1:pass
xpos=/[NJR].*/&storage=/.*hascop.*/;func=/(.subj.*)/;xpos=/[VNJR].*/&func=/conj/&storage!=/.*hassubj.*/&storage!=/.*haspass.*/	#1>#2;#1>#3	#3~#2;#2:edep=$1
xpos=/N.*/&storage=/.*hascop.*/;func=/(.subj).*/;xpos=/V.*/&func=/conj/&storage!=/.*hassubj.*/&storage=/.*haspass.*/	#1>#2;#1>#3	#3~#2;#2:edep=$1:pass

# coord verbs with single obj (X cooks and eats the food)
xpos=/V.*/;xpos=/V.*/&func=/conj/;func=/(i?obj|ccomp)/	#1.*#2.*#3;#1>#3;#1>#2	#2~#3;#3:edep=$1
# coord obj (X eats A and B)
text=/.*/;func=/(i?obj|ccomp)/;func=/conj/	#1>#2>#3	#1~#3;#3:edep=$1

# relative clauses
# clear edeps for bearer of `ref` edep - it may ONLY carry the `ref` edep
text=/.*/;func=/acl:relcl/;func=/(.*)/&xpos=/^W(DT|P.?)$/	#1>#2>#3	#3:edep=
text=/.*/;func=/acl:relcl/;func=/[cx]comp|advcl/;func=/(.*)/&xpos=/^W(DT|P.?)$/&func=/obj|obl|nsubj.*/	#1>#2>#3>#4;#4.*#3	#4:edep=
# adverbial relative clauses
text=/.*/;func=/advcl:relcl/;func=/.*(subj.*)/&xpos=/^W(DT|P.?)$/	#1>#2>#3	#1~#3;#3:edep=ref;#2~#1;#1:edep=c$1
text=/.*/;func=/advcl:relcl/;func=/.*obj/&xpos=/^W(DT|P.?)$/	#1>#2>#3	#1~#3;#3:edep=ref;#2~#1;#1:edep=ccomp
text=/.*/;func=/advcl:relcl/;func=/obl/&xpos=/^W(DT|P.?)$/	#1>#2>#3	#1~#3;#3:edep=ref;#2~#1;#1:edep=advcl
# normal relative
text=/.*/;func=/acl:relcl/;func=/(.*)/&xpos=/^W(DT|P.?)$/	#1>#2>#3	#1~#3;#3:edep=ref;#2~#1;#1:edep=$1
# relative in embedded PP ("to which")
text=/.*/;func=/acl:relcl/;func=/(nmod|obl)/&xpos=/^W(DT|P.?)$/;func=/case/&lemma=/(.*)/	#1>#2>#3>#4	#2~#1;#1:edep=$1:$3
# coordinate matrix NP with embedded PP ([X and Y] to which Z)
text=/.*/;func=/acl:relcl/;func=/(nmod|obl)/&xpos=/^W(DT|P.?)$/;func=/case/&lemma=/(.*)/;func=/conj/&storage!=/.*hascase.*/	#1>#2>#3>#4;#1>#5;#5.*#3	#2~#5;#5:edep=$1:$3
# relative pronoun governed by subordinate clause of acl:relcl (the thing that/obj I want you to do/xcomp)
text=/.*/;func=/acl:relcl/;func=/[cx]comp|advcl/;func=/(obj|obl|nsubj.*)/&xpos=/^W(DT|P.?)$/	#1>#2>#3>#4;#4.*#3	#1~#4;#4:edep=ref;#3~#1;#1:edep=$1
# relative pronoun in PP embedded in NP ("... most of whom")
text=/.*/;func=/acl:relcl/;func=/.*/;func=/(nmod)/&xpos=/^W(DT|P.?)$/;func=/case/&lemma=/(.*)/	#1>#2>#3>#4>#5	#4:edep=
text=/.*/;func=/acl:relcl/;func=/.*/;func=/(nmod)/&xpos=/^W(DT|P.?)$/;func=/case/&lemma=/(.*)/	#1>#2>#3>#4>#5	#1~#4;#4:edep=ref;#3~#1;#1:edep=$1:$3
# exception to previous: prevent cycle when acl:relcl head has a coordinate predicate
func=/(.*)/;func=/acl:relcl/;func=/.*/;func=/(nmod)/&xpos=/^W(DT|P.?)$/;func=/case/&lemma=/(.*)/;func=/conj/;text=/.*/	#1>#2>#3>#4>#5;#2>#6;#7>#1	#1:edep=;#7~#1;#1:edep=$1

# nsubj:pass:xsubj
#func=/nsubj:pass/&edep=/.*xsubj.*/;func=/xcomp|conj/	#2~#1	#2~#1;#2:edep=nsubj:pass:xsubj
#func=/xcomp/;edom=/(.*subj:)xsubj/&func=/nsubj:pass/	#1~#2	#2:edom=$1pass:xsubj
func=/xcomp/;func=/aux:pass/;edom=/.*([cn])subj:xsubj.*/	#1>#2;#1~#3	#1~#3;#3:edep=$1subj:pass:xsubj
text=/.*/;func=/obj/;func=/xcomp/&xpos=/VBN/	#1>#2;#1>#3;#3~#2	#3~#2;#2:edep=nsubj:pass:xsubj
text=/.*/;func=/ccomp/;func=/xcomp/&xpos=/VBN/	#1>#2;#1>#3;#3~#2	#3~#2;#2:edep=csubj:pass:xsubj

# coord general - duplicate all resulting deps and edeps on `conj`; note that `parataxis` is not carried over
text=/.*/;func=/(.*)/&func!=/parataxis|root/;func=/conj/	#1>#2>#3	#1~#3;#3:edep+=$1
#text=/.*/;edep=/(.*)/&edep!=/conj.*/&func!=/parataxis|root/;func=/conj/	#1~#2;#2>#3	#1~#3;#3:edep=$1
edom=/.*?([0-9.]+\|\|(nmod|obl|conj):[a-z]+).*/&edep!=/conj.*/;func=/conj/	#1>#2	#2:edom=$1

# coord unlike coordination
# compound + amod
text=/.*/;func=/compound/;func=/conj/&xpos=/J.*|V.N/&edom=/(.*?[0-9.]+\|\|)compound(.*)/	#1>#2>#3;#1~#3	#3:edom=$1amod$2
# amod + compound
text=/.*/;func=/amod/;func=/conj/&xpos=/NN.*/&edom=/(.*?[0-9.]+\|\|)amod(.*)/	#1>#2>#3;#1~#3	#3:edom=$1compound$2
# nsubj + csubj
text=/.*/;func=/nsubj/;func=/conj/&xpos=/V.G/&edom=/(.*?[0-9.]+\|\|)nsubj(.*)/	#1>#2>#3;#1~#3	#3:edom=$1csubj$2

# known bad augmentation
text=/play/;text=/noons/&edep=/.*obl:in_after.*/	#1~#2	#1~#2;#2:edep=;#1~#2;#2:edep=obl:in
#text=/know|result/;text=/satisfy|get/&edep=/.*advcl:if_to.*/	#1~#2	#1~#2;#2:edep=;#1~#2;#2:edep=advcl:if

# Add plural to relative past tenses based on parent of ref
morph=/.*Plur.*/;xpos=/WDT/&edep=/.*ref.*/&func=/.subj.*/;xpos=/VBD/&func=/acl.*/	#1>#3>#2;#1~#2	#3:morph+=Number=Plur

# supertokens
text=/^(?i)gon|wan/;text=/^(?i)na/	#1.#2	#1><#2
text=/^(?i)dun/;text=/^(?i)no/	#1.#2	#1><#2
text=/^(?i)out|got/;text=/^(?i)ta/	#1.#2	#1><#2
text=/^(?i)c'?m/&misc=/.*SpaceAfter.No.*/;text=/^(?i)on/	#1.#2	#1><#2
misc=/.*SpaceAfter.No.*/;text=/^(?i)[^A-Za-z]?(ll|d|m|ve|s)/&xpos=/VBP|MD|VHP|VBZ|VHZ|VB|VH/	#1.#2	#1><#2
misc=/.*SpaceAfter.No.*/;xpos=/POS/	#1.#2	#1><#2
misc=/.*SpaceAfter.No.*/&upos=/VERB|AUX/;lemma=/n[o']?t/	#1.#2	#1><#2
lemma=/let/;lemma=/we/&text=/^['‘’]?s$/	#1.#2	#1><#2
